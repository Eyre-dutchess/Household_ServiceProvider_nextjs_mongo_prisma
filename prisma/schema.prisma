// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  isAdmin        Boolean   @default(false)

  accounts       Account[]
  sessions       Session[]
  communications Communication[]
  reviews        Review[]
  reservations   Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  ProviderAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, ProviderAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  category    String
  gender      String
  age         Int
  description String
  skills      String[]
  imgSrc      String
  rating      Int
  price       Int
  createdAt   DateTime @default(now())

  reviews      Review[]
  reservations Reservation[]
}

model Communication {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     String

  messages  Message[]
  user      User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  communication   Communication @relation(fields: [communicationId], references: [id], onDelete: Cascade)
  communicationId String
}

model Reservation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId String  @db.ObjectId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId String  @db.ObjectId
}
